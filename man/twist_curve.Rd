% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twist-curve.R
\name{twist_curve}
\alias{twist_curve}
\title{Generate a smooth twisted curve in 2D from a 3D spiral projection}
\usage{
twist_curve(
  n = 300,
  amplitude = 0.2,
  frequency = 2,
  origin = c(0, 0),
  direction = c(1, 0),
  t_range = c(0, 2 * pi)
)
}
\arguments{
\item{n}{Integer.
Number of points to generate along the curve. Default is \code{300}.}

\item{amplitude}{Numeric.
Amplitude of the radial modulation in the 3D spiral.
Controls how tightly the loop twists.}

\item{frequency}{Numeric.
Frequency of the radial modulation (i.e., number of bumps per revolution).}

\item{origin}{Numeric vector of length 2.
The desired starting position of the curve in 2D space.}

\item{direction}{Numeric vector of length 2.
A target point indicating the overall orientation and extent of the curve.
The curve will be transformed to point
approximately from \code{origin} toward this vector.}

\item{t_range}{Numeric vector of length 2.
The range of the parameter \code{t}, which controls how far along the spiral to travel.
Larger ranges yield longer, more twisted curves.}
}
\value{
A data frame with two columns ("x", "y") and \code{n} rows,
representing the 2D coordinates of the projected curve.
}
\description{
This function creates a smooth, looped 2D curve
by generating a 3D twisted curve and projecting it onto 2D using PCA.
The resulting shape resembles a twisted loop, and can be oriented
and scaled freely.
}
\note{
The \code{origin} and \code{direction} parameters
do not directly constrain the endpoints of the curve.
Instead, after generating a 3D spiral,
the function performs PCA to obtain a best-fit 2D projection plane.
The projected curve is then transformed
so that the direction from its first point to its last point
aligns approximately with the vector from \code{origin} to \code{direction}.
Due to the curvature of the original spiral
and the non-linear nature of the projection,
the endpoints may not exactly match.
}
\examples{
curve <- twist_curve()
plot(curve, type = "l", asp = 1)

# Change orientation
curve2 <- twist_curve(origin = c(0, 0), direction = c(1, 1))
lines(curve2, col = "red")

# More dramatic twist
curve3 <- twist_curve(amplitude = 0.5, frequency = 3)
lines(curve3, col = "blue")
}
