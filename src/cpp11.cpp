// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// code_bounce.cpp
doubles bounce_cpp(int n, double init, double velocity, double damping, double mass, double min, double max);
extern "C" SEXP _rasengan_bounce_cpp(SEXP n, SEXP init, SEXP velocity, SEXP damping, SEXP mass, SEXP min, SEXP max) {
  BEGIN_CPP11
    return cpp11::as_sexp(bounce_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<double>>(init), cpp11::as_cpp<cpp11::decay_t<double>>(velocity), cpp11::as_cpp<cpp11::decay_t<double>>(damping), cpp11::as_cpp<cpp11::decay_t<double>>(mass), cpp11::as_cpp<cpp11::decay_t<double>>(min), cpp11::as_cpp<cpp11::decay_t<double>>(max)));
  END_CPP11
}
// code_ease.cpp
doubles in_quad(const doubles time);
extern "C" SEXP _rasengan_in_quad(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_quad(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_quad(const doubles time);
extern "C" SEXP _rasengan_out_quad(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_quad(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_quad(const doubles time);
extern "C" SEXP _rasengan_in_out_quad(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_quad(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_cubic(const doubles time);
extern "C" SEXP _rasengan_in_cubic(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_cubic(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_cubic(const doubles time);
extern "C" SEXP _rasengan_out_cubic(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_cubic(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_cubic(const doubles time);
extern "C" SEXP _rasengan_in_out_cubic(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_cubic(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_quart(const doubles time);
extern "C" SEXP _rasengan_in_quart(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_quart(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_quart(const doubles time);
extern "C" SEXP _rasengan_out_quart(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_quart(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_quart(const doubles time);
extern "C" SEXP _rasengan_in_out_quart(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_quart(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_quint(const doubles time);
extern "C" SEXP _rasengan_in_quint(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_quint(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_quint(const doubles time);
extern "C" SEXP _rasengan_out_quint(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_quint(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_quint(const doubles time);
extern "C" SEXP _rasengan_in_out_quint(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_quint(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_sine(const doubles time);
extern "C" SEXP _rasengan_in_sine(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_sine(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_sine(const doubles time);
extern "C" SEXP _rasengan_out_sine(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_sine(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_sine(const doubles time);
extern "C" SEXP _rasengan_in_out_sine(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_sine(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_exp(const doubles time);
extern "C" SEXP _rasengan_in_exp(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_exp(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_exp(const doubles time);
extern "C" SEXP _rasengan_out_exp(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_exp(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_exp(const doubles time);
extern "C" SEXP _rasengan_in_out_exp(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_exp(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_circ(const doubles time);
extern "C" SEXP _rasengan_in_circ(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_circ(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_circ(const doubles time);
extern "C" SEXP _rasengan_out_circ(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_circ(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_circ(const doubles time);
extern "C" SEXP _rasengan_in_out_circ(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_circ(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_elastic(const doubles time);
extern "C" SEXP _rasengan_in_elastic(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_elastic(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_elastic(const doubles time);
extern "C" SEXP _rasengan_out_elastic(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_elastic(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_elastic(const doubles time);
extern "C" SEXP _rasengan_in_out_elastic(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_elastic(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_back(const doubles time);
extern "C" SEXP _rasengan_in_back(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_back(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_back(const doubles time);
extern "C" SEXP _rasengan_out_back(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_back(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_back(const doubles time);
extern "C" SEXP _rasengan_in_out_back(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_back(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_bounce(const doubles time);
extern "C" SEXP _rasengan_in_bounce(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_bounce(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles out_bounce(const doubles time);
extern "C" SEXP _rasengan_out_bounce(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(out_bounce(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_ease.cpp
doubles in_out_bounce(const doubles time);
extern "C" SEXP _rasengan_in_out_bounce(SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(in_out_bounce(cpp11::as_cpp<cpp11::decay_t<const doubles>>(time)));
  END_CPP11
}
// code_fbm.cpp
doubles fbm_1d_cpp(double hurst_idx, const std::vector<double>& X);
extern "C" SEXP _rasengan_fbm_1d_cpp(SEXP hurst_idx, SEXP X) {
  BEGIN_CPP11
    return cpp11::as_sexp(fbm_1d_cpp(cpp11::as_cpp<cpp11::decay_t<double>>(hurst_idx), cpp11::as_cpp<cpp11::decay_t<const std::vector<double>&>>(X)));
  END_CPP11
}
// code_fbm.cpp
doubles fbr_1d_cpp(double hurst_idx, const std::vector<double>& X);
extern "C" SEXP _rasengan_fbr_1d_cpp(SEXP hurst_idx, SEXP X) {
  BEGIN_CPP11
    return cpp11::as_sexp(fbr_1d_cpp(cpp11::as_cpp<cpp11::decay_t<double>>(hurst_idx), cpp11::as_cpp<cpp11::decay_t<const std::vector<double>&>>(X)));
  END_CPP11
}
// code_fbm.cpp
doubles fbr_2d_cpp(double hurst_idx, const std::vector<double>& X);
extern "C" SEXP _rasengan_fbr_2d_cpp(SEXP hurst_idx, SEXP X) {
  BEGIN_CPP11
    return cpp11::as_sexp(fbr_2d_cpp(cpp11::as_cpp<cpp11::decay_t<double>>(hurst_idx), cpp11::as_cpp<cpp11::decay_t<const std::vector<double>&>>(X)));
  END_CPP11
}
// code_noise.cpp
doubles noise_2d_cpp(int type, int seed, float freq, int fractals, int octaves, float lacunarity, float gain, float weighted_strength, float ping_pong_strength, int distance_function, int return_type, float jitter, doubles_matrix<> d);
extern "C" SEXP _rasengan_noise_2d_cpp(SEXP type, SEXP seed, SEXP freq, SEXP fractals, SEXP octaves, SEXP lacunarity, SEXP gain, SEXP weighted_strength, SEXP ping_pong_strength, SEXP distance_function, SEXP return_type, SEXP jitter, SEXP d) {
  BEGIN_CPP11
    return cpp11::as_sexp(noise_2d_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(type), cpp11::as_cpp<cpp11::decay_t<int>>(seed), cpp11::as_cpp<cpp11::decay_t<float>>(freq), cpp11::as_cpp<cpp11::decay_t<int>>(fractals), cpp11::as_cpp<cpp11::decay_t<int>>(octaves), cpp11::as_cpp<cpp11::decay_t<float>>(lacunarity), cpp11::as_cpp<cpp11::decay_t<float>>(gain), cpp11::as_cpp<cpp11::decay_t<float>>(weighted_strength), cpp11::as_cpp<cpp11::decay_t<float>>(ping_pong_strength), cpp11::as_cpp<cpp11::decay_t<int>>(distance_function), cpp11::as_cpp<cpp11::decay_t<int>>(return_type), cpp11::as_cpp<cpp11::decay_t<float>>(jitter), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(d)));
  END_CPP11
}
// code_noise.cpp
doubles noise_3d_cpp(int type, int seed, float freq, int fractals, int octaves, float lacunarity, float gain, float weighted_strength, float ping_pong_strength, int distance_function, int return_type, float jitter, int rotation_type, doubles_matrix<> d);
extern "C" SEXP _rasengan_noise_3d_cpp(SEXP type, SEXP seed, SEXP freq, SEXP fractals, SEXP octaves, SEXP lacunarity, SEXP gain, SEXP weighted_strength, SEXP ping_pong_strength, SEXP distance_function, SEXP return_type, SEXP jitter, SEXP rotation_type, SEXP d) {
  BEGIN_CPP11
    return cpp11::as_sexp(noise_3d_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(type), cpp11::as_cpp<cpp11::decay_t<int>>(seed), cpp11::as_cpp<cpp11::decay_t<float>>(freq), cpp11::as_cpp<cpp11::decay_t<int>>(fractals), cpp11::as_cpp<cpp11::decay_t<int>>(octaves), cpp11::as_cpp<cpp11::decay_t<float>>(lacunarity), cpp11::as_cpp<cpp11::decay_t<float>>(gain), cpp11::as_cpp<cpp11::decay_t<float>>(weighted_strength), cpp11::as_cpp<cpp11::decay_t<float>>(ping_pong_strength), cpp11::as_cpp<cpp11::decay_t<int>>(distance_function), cpp11::as_cpp<cpp11::decay_t<int>>(return_type), cpp11::as_cpp<cpp11::decay_t<float>>(jitter), cpp11::as_cpp<cpp11::decay_t<int>>(rotation_type), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(d)));
  END_CPP11
}
// code_noise.cpp
doubles_matrix<> domain_warp_2d_cpp(int dtype, int seed, float amplitude, int fractals, int octaves, float lacunarity, float gain, doubles_matrix<> d);
extern "C" SEXP _rasengan_domain_warp_2d_cpp(SEXP dtype, SEXP seed, SEXP amplitude, SEXP fractals, SEXP octaves, SEXP lacunarity, SEXP gain, SEXP d) {
  BEGIN_CPP11
    return cpp11::as_sexp(domain_warp_2d_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(dtype), cpp11::as_cpp<cpp11::decay_t<int>>(seed), cpp11::as_cpp<cpp11::decay_t<float>>(amplitude), cpp11::as_cpp<cpp11::decay_t<int>>(fractals), cpp11::as_cpp<cpp11::decay_t<int>>(octaves), cpp11::as_cpp<cpp11::decay_t<float>>(lacunarity), cpp11::as_cpp<cpp11::decay_t<float>>(gain), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(d)));
  END_CPP11
}
// code_noise.cpp
doubles_matrix<> domain_warp_3d_cpp(int dtype, int seed, float amplitude, int fractals, int octaves, float lacunarity, float gain, int rotation_type, doubles_matrix<> d);
extern "C" SEXP _rasengan_domain_warp_3d_cpp(SEXP dtype, SEXP seed, SEXP amplitude, SEXP fractals, SEXP octaves, SEXP lacunarity, SEXP gain, SEXP rotation_type, SEXP d) {
  BEGIN_CPP11
    return cpp11::as_sexp(domain_warp_3d_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(dtype), cpp11::as_cpp<cpp11::decay_t<int>>(seed), cpp11::as_cpp<cpp11::decay_t<float>>(amplitude), cpp11::as_cpp<cpp11::decay_t<int>>(fractals), cpp11::as_cpp<cpp11::decay_t<int>>(octaves), cpp11::as_cpp<cpp11::decay_t<float>>(lacunarity), cpp11::as_cpp<cpp11::decay_t<float>>(gain), cpp11::as_cpp<cpp11::decay_t<int>>(rotation_type), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(d)));
  END_CPP11
}
// code_path.cpp
doubles_matrix<> es_spiral_cpp(const doubles start, const doubles end, const std::size_t num_iter, double max_n);
extern "C" SEXP _rasengan_es_spiral_cpp(SEXP start, SEXP end, SEXP num_iter, SEXP max_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(es_spiral_cpp(cpp11::as_cpp<cpp11::decay_t<const doubles>>(start), cpp11::as_cpp<cpp11::decay_t<const doubles>>(end), cpp11::as_cpp<cpp11::decay_t<const std::size_t>>(num_iter), cpp11::as_cpp<cpp11::decay_t<double>>(max_n)));
  END_CPP11
}
// code_path.cpp
doubles_matrix<> es_biarc_cpp(const doubles start, const doubles end, double max_n);
extern "C" SEXP _rasengan_es_biarc_cpp(SEXP start, SEXP end, SEXP max_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(es_biarc_cpp(cpp11::as_cpp<cpp11::decay_t<const doubles>>(start), cpp11::as_cpp<cpp11::decay_t<const doubles>>(end), cpp11::as_cpp<cpp11::decay_t<double>>(max_n)));
  END_CPP11
}
// code_path.cpp
doubles_matrix<> wind_mouse_cpp(const doubles start, const doubles end, double gravity, double wind, double min_wait, double max_wait, double max_step, double target_area, double mouse_speed, int seed);
extern "C" SEXP _rasengan_wind_mouse_cpp(SEXP start, SEXP end, SEXP gravity, SEXP wind, SEXP min_wait, SEXP max_wait, SEXP max_step, SEXP target_area, SEXP mouse_speed, SEXP seed) {
  BEGIN_CPP11
    return cpp11::as_sexp(wind_mouse_cpp(cpp11::as_cpp<cpp11::decay_t<const doubles>>(start), cpp11::as_cpp<cpp11::decay_t<const doubles>>(end), cpp11::as_cpp<cpp11::decay_t<double>>(gravity), cpp11::as_cpp<cpp11::decay_t<double>>(wind), cpp11::as_cpp<cpp11::decay_t<double>>(min_wait), cpp11::as_cpp<cpp11::decay_t<double>>(max_wait), cpp11::as_cpp<cpp11::decay_t<double>>(max_step), cpp11::as_cpp<cpp11::decay_t<double>>(target_area), cpp11::as_cpp<cpp11::decay_t<double>>(mouse_speed), cpp11::as_cpp<cpp11::decay_t<int>>(seed)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_rasengan_bounce_cpp",         (DL_FUNC) &_rasengan_bounce_cpp,          7},
    {"_rasengan_domain_warp_2d_cpp", (DL_FUNC) &_rasengan_domain_warp_2d_cpp,  8},
    {"_rasengan_domain_warp_3d_cpp", (DL_FUNC) &_rasengan_domain_warp_3d_cpp,  9},
    {"_rasengan_es_biarc_cpp",       (DL_FUNC) &_rasengan_es_biarc_cpp,        3},
    {"_rasengan_es_spiral_cpp",      (DL_FUNC) &_rasengan_es_spiral_cpp,       4},
    {"_rasengan_fbm_1d_cpp",         (DL_FUNC) &_rasengan_fbm_1d_cpp,          2},
    {"_rasengan_fbr_1d_cpp",         (DL_FUNC) &_rasengan_fbr_1d_cpp,          2},
    {"_rasengan_fbr_2d_cpp",         (DL_FUNC) &_rasengan_fbr_2d_cpp,          2},
    {"_rasengan_in_back",            (DL_FUNC) &_rasengan_in_back,             1},
    {"_rasengan_in_bounce",          (DL_FUNC) &_rasengan_in_bounce,           1},
    {"_rasengan_in_circ",            (DL_FUNC) &_rasengan_in_circ,             1},
    {"_rasengan_in_cubic",           (DL_FUNC) &_rasengan_in_cubic,            1},
    {"_rasengan_in_elastic",         (DL_FUNC) &_rasengan_in_elastic,          1},
    {"_rasengan_in_exp",             (DL_FUNC) &_rasengan_in_exp,              1},
    {"_rasengan_in_out_back",        (DL_FUNC) &_rasengan_in_out_back,         1},
    {"_rasengan_in_out_bounce",      (DL_FUNC) &_rasengan_in_out_bounce,       1},
    {"_rasengan_in_out_circ",        (DL_FUNC) &_rasengan_in_out_circ,         1},
    {"_rasengan_in_out_cubic",       (DL_FUNC) &_rasengan_in_out_cubic,        1},
    {"_rasengan_in_out_elastic",     (DL_FUNC) &_rasengan_in_out_elastic,      1},
    {"_rasengan_in_out_exp",         (DL_FUNC) &_rasengan_in_out_exp,          1},
    {"_rasengan_in_out_quad",        (DL_FUNC) &_rasengan_in_out_quad,         1},
    {"_rasengan_in_out_quart",       (DL_FUNC) &_rasengan_in_out_quart,        1},
    {"_rasengan_in_out_quint",       (DL_FUNC) &_rasengan_in_out_quint,        1},
    {"_rasengan_in_out_sine",        (DL_FUNC) &_rasengan_in_out_sine,         1},
    {"_rasengan_in_quad",            (DL_FUNC) &_rasengan_in_quad,             1},
    {"_rasengan_in_quart",           (DL_FUNC) &_rasengan_in_quart,            1},
    {"_rasengan_in_quint",           (DL_FUNC) &_rasengan_in_quint,            1},
    {"_rasengan_in_sine",            (DL_FUNC) &_rasengan_in_sine,             1},
    {"_rasengan_noise_2d_cpp",       (DL_FUNC) &_rasengan_noise_2d_cpp,       13},
    {"_rasengan_noise_3d_cpp",       (DL_FUNC) &_rasengan_noise_3d_cpp,       14},
    {"_rasengan_out_back",           (DL_FUNC) &_rasengan_out_back,            1},
    {"_rasengan_out_bounce",         (DL_FUNC) &_rasengan_out_bounce,          1},
    {"_rasengan_out_circ",           (DL_FUNC) &_rasengan_out_circ,            1},
    {"_rasengan_out_cubic",          (DL_FUNC) &_rasengan_out_cubic,           1},
    {"_rasengan_out_elastic",        (DL_FUNC) &_rasengan_out_elastic,         1},
    {"_rasengan_out_exp",            (DL_FUNC) &_rasengan_out_exp,             1},
    {"_rasengan_out_quad",           (DL_FUNC) &_rasengan_out_quad,            1},
    {"_rasengan_out_quart",          (DL_FUNC) &_rasengan_out_quart,           1},
    {"_rasengan_out_quint",          (DL_FUNC) &_rasengan_out_quint,           1},
    {"_rasengan_out_sine",           (DL_FUNC) &_rasengan_out_sine,            1},
    {"_rasengan_wind_mouse_cpp",     (DL_FUNC) &_rasengan_wind_mouse_cpp,     10},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_rasengan(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
